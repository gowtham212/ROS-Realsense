// Generated by gencpp from file object_detection_2d/MouseEvent.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_2D_MESSAGE_MOUSEEVENT_H
#define OBJECT_DETECTION_2D_MESSAGE_MOUSEEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection_2d/Point2D.h>

namespace object_detection_2d
{
template <class ContainerAllocator>
struct MouseEvent_
{
  typedef MouseEvent_<ContainerAllocator> Type;

  MouseEvent_()
    : type(0)
    , button(0)
    , position()  {
    }
  MouseEvent_(const ContainerAllocator& _alloc)
    : type(0)
    , button(0)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _button_type;
  _button_type button;

   typedef  ::object_detection_2d::Point2D_<ContainerAllocator>  _position_type;
  _position_type position;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PRESS)
  #undef PRESS
#endif
#if defined(_WIN32) && defined(MOVE)
  #undef MOVE
#endif
#if defined(_WIN32) && defined(RELEASE)
  #undef RELEASE
#endif
#if defined(_WIN32) && defined(NO_BUTTON)
  #undef NO_BUTTON
#endif
#if defined(_WIN32) && defined(LEFT_BUTTON)
  #undef LEFT_BUTTON
#endif
#if defined(_WIN32) && defined(MIDDLE_BUTTON)
  #undef MIDDLE_BUTTON
#endif
#if defined(_WIN32) && defined(RIGHT_BUTTON)
  #undef RIGHT_BUTTON
#endif
#if defined(_WIN32) && defined(UNKNOWN_BUTTON)
  #undef UNKNOWN_BUTTON
#endif

  enum {
    PRESS = 0u,
    MOVE = 1u,
    RELEASE = 2u,
    NO_BUTTON = 0u,
    LEFT_BUTTON = 1u,
    MIDDLE_BUTTON = 2u,
    RIGHT_BUTTON = 3u,
    UNKNOWN_BUTTON = 4u,
  };


  typedef boost::shared_ptr< ::object_detection_2d::MouseEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection_2d::MouseEvent_<ContainerAllocator> const> ConstPtr;

}; // struct MouseEvent_

typedef ::object_detection_2d::MouseEvent_<std::allocator<void> > MouseEvent;

typedef boost::shared_ptr< ::object_detection_2d::MouseEvent > MouseEventPtr;
typedef boost::shared_ptr< ::object_detection_2d::MouseEvent const> MouseEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection_2d::MouseEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection_2d::MouseEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection_2d::MouseEvent_<ContainerAllocator1> & lhs, const ::object_detection_2d::MouseEvent_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.button == rhs.button &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection_2d::MouseEvent_<ContainerAllocator1> & lhs, const ::object_detection_2d::MouseEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection_2d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_2d::MouseEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_2d::MouseEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_2d::MouseEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57bba32321c89c59bbda1bc21239af2c";
  }

  static const char* value(const ::object_detection_2d::MouseEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57bba32321c89c59ULL;
  static const uint64_t static_value2 = 0xbbda1bc21239af2cULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection_2d/MouseEvent";
  }

  static const char* value(const ::object_detection_2d::MouseEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Types.\n"
"uint8 PRESS	= 0\n"
"uint8 MOVE	= 1\n"
"uint8 RELEASE	= 2\n"
"\n"
"# Buttons.\n"
"uint8 NO_BUTTON		= 0\n"
"uint8 LEFT_BUTTON	= 1\n"
"uint8 MIDDLE_BUTTON	= 2\n"
"uint8 RIGHT_BUTTON	= 3\n"
"uint8 UNKNOWN_BUTTON	= 4\n"
"\n"
"uint8 type\n"
"uint8 button	# button that caused the event (== NO_BUTTON for MOVE)\n"
"\n"
"# Mouse position when event was generated.\n"
"object_detection_2d/Point2D position\n"
"\n"
"================================================================================\n"
"MSG: object_detection_2d/Point2D\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::object_detection_2d::MouseEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.button);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MouseEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection_2d::MouseEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection_2d::MouseEvent_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::object_detection_2d::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_2D_MESSAGE_MOUSEEVENT_H
