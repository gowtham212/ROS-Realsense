// Generated by gencpp from file object_detection_3d_msgs/DetectedObject3D.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_3D_MSGS_MESSAGE_DETECTEDOBJECT3D_H
#define OBJECT_DETECTION_3D_MSGS_MESSAGE_DETECTEDOBJECT3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection_3d_msgs/OrientedBox.h>

namespace object_detection_3d_msgs
{
template <class ContainerAllocator>
struct DetectedObject3D_
{
  typedef DetectedObject3D_<ContainerAllocator> Type;

  DetectedObject3D_()
    : name()
    , box()  {
    }
  DetectedObject3D_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , box(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::object_detection_3d_msgs::OrientedBox_<ContainerAllocator>  _box_type;
  _box_type box;





  typedef boost::shared_ptr< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject3D_

typedef ::object_detection_3d_msgs::DetectedObject3D_<std::allocator<void> > DetectedObject3D;

typedef boost::shared_ptr< ::object_detection_3d_msgs::DetectedObject3D > DetectedObject3DPtr;
typedef boost::shared_ptr< ::object_detection_3d_msgs::DetectedObject3D const> DetectedObject3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator1> & lhs, const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.box == rhs.box;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator1> & lhs, const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection_3d_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "313c73372cba8ca3b40d40c0f7d90ff3";
  }

  static const char* value(const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x313c73372cba8ca3ULL;
  static const uint64_t static_value2 = 0xb40d40c0f7d90ff3ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection_3d_msgs/DetectedObject3D";
  }

  static const char* value(const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"OrientedBox box\n"
"\n"
"================================================================================\n"
"MSG: object_detection_3d_msgs/OrientedBox\n"
"# Pose = position of centroid of object + orientation of object.\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Dimensions of the box.\n"
"float64 width\n"
"float64 height\n"
"float64 depth\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.box);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection_3d_msgs::DetectedObject3D_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "box: ";
    s << std::endl;
    Printer< ::object_detection_3d_msgs::OrientedBox_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_3D_MSGS_MESSAGE_DETECTEDOBJECT3D_H
